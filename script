#!/bin/bash

######################################!!!!######################################
# This script allows you to hook into parts of cpw by running custom code
# triggered by different events.
#
# By default, it takes 3 arguments:
#   $1 - the name of the event
#   $2 - the cpw command (run, build, update, etc.)
#   $3 - the name of the docker-compose service
#
# Moreover, cpw passes any extra argument you give it, allowing you to create
# additional custom conditions. Basically, all the arguments you give to cpw are
# passed here prepended with the event name as a first argument.
#
# This script also contains cpw configuration variables in the init section.
######################################!!!!######################################

event="$1"
cpw_command="$2"
service="$3"

# You can use this type of function to set custom cgroups for a given container.
# This example will remove restrictions on all USB devices for the container.
# This will allow you to use adb without starting containers in privileged mode
# for instance. You would still need to bind /dev/bus/usb as a volume though,
# which can be done by changing your docker-compose.yml (cpw edit).
set_cgroup () {
    major_number="$(ls -l /dev/bus/usb/001/001 | awk '{print $5}' | tr -d ',')"
    container_id="$(docker ps -qlf "name=cpw_$1" --no-trunc)"
    echo "c $major_number:* rwm" > \
        /sys/fs/cgroup/devices/docker/$container_id/devices.allow
}

######################################!!!!######################################
# Runs at every cpw startup 
######################################!!!!######################################
if [[ "$event" = "init" ]]; then

    # Check if the Docker daemon is running, if not try to start it
    if [[ $(systemctl is-active docker) = "inactive" ]]; then
        echo "Docker is not running, attempting to start..."
        systemctl start docker

        if [[ $(systemctl is-active docker) = "inactive" ]]; then
            echo "Failed to start Docker daemon, please start it manually"
            exit 1
        fi
    fi

    # Default editor to use when editing this script, docker-compose.yml or
    # Dockerfiles.
    EDITOR=vim

    # Note about profile updates: The cpw update mechanism will only perform
    # a system update on the corresponding image, the image won't be rebuilt.
    # If you want a rebuild you can use the 'rerun' and 'build' commands.
    # See the 'update' and 'build' events in this file for more details.

    # If there is a profile you don't ever want to update (for example, if a
    # rebuild is necessary to get a newer version of programs) you can add it
    # to this array.
    DISABLED_UPDATES=( "burp" )

    # If there is a profile you don't ever want to rebuild you can add it to
    # this array.
    DISABLED_REBUILDS=()

    # This controls whether or not cpw will try to update whenever you run 'cpw
    # run <service>' if the image is older than the configured max age.
    AUTO_UPDATE=true

    # The number of days cpw should wait before triggering an update event on an
    # image. The code dictating the update event behavior is in this same file
    # below. By default it only does a system update for Arch Linux based images.
    # This check is only triggered on a specified image (and never its parents)
    # by 'cpw run' commands.
    UPDATE_DAYS=15

    # The number of days cpw should wait before rebuilding an image from
    # scratch. This check is only triggered on an image and all its parents by
    # 'cpw run' or 'cpw build' commands.
    REBUILD_DAYS=60
    
    # This is an example of a volume variable which can be used by
    # docker-compose.yml and in this script. It needs to be exported to be
    # visible by docker-compose.
    export VOLUME_DIRECTORY=/home/$SUDO_USER/volume

    # Use this array to specify the docker-compose options (docker-compose -h
    # for more info).
    COMPOSE_OPTS=( "--log-level" "ERROR" )

    # This is an array of the default arguments for the docker-compose run
    # command. Removing '--rm' is not advised as the created container will not
    # benefit from the cpw update system if 'cpw start' is used over 'cpw run'.
    RUN_ARGS=( "--rm" )

    # This is an array of the default arguments for the docker-compose build
    # command. Removing '--force-rm' is not advised because it will leave
    # containers from failed builds behind.
    BUILD_ARGS=( "--force-rm" "--no-cache" )

    # Preemptively creating your volume directories will allow you to set their
    # permissions. If you let docker-compose create them they will be owned by
    # root.
    if [[ ! -d "$VOLUME_DIRECTORY" ]]; then
        mkdir -p "$VOLUME_DIRECTORY"
        chown "$SUDO_USER" "$VOLUME_DIRECTORY"
    fi

    # Here is an example of how you could change the default behavior for a
    # given profile.
    if [[ "$service" = "burp" ]]; then

        # This will make the container run in detached mode.
        RUN_ARGS=( "-d" )

        # Because the '--rm' argument is ignored in detached mode, you might
        # want to remove the containers afterwards. This could for example be
        # done the next time 'cpw run' or 'cpw update' is used.
        containers=$(docker ps -aqf "name=cpw_$service")

        if [[ -n "$containers" && \
            "$cpw_command" =~ ^.*run$ || "$cpw_command" = "update" ]]; then
            for container in $containers; do
                source ./script stop "${@:2}"
                docker rm "$container"
            done
        fi
    fi

    # Here is an example of BUILD_ARGS change with a custom cpw parameter. The
    # '--no-cache' argument as been removed so running 'cpw run' or 'cpw build'
    # with the '-c' flag will build images using cached layers.
    if [[ " ${@:4} " =~ " -c " ]]; then
        BUILD_ARGS=( "--force-rm" )
    fi

    # Force update when running 'cpw run' but don't rebuild anything.
    if [[ " ${@:4} " =~ " -u " ]]; then
        UPDATE_DAYS=0
        REBUILD_DAYS=9999
    fi

    # Skip any rebuild or update.
    if [[ " ${@:4} " =~ " -s " ]]; then
        UPDATE_DAYS=9999
        REBUILD_DAYS=9999
    fi

######################################!!!!######################################
# Image update code
######################################!!!!######################################
elif [[ "$event" = "update" ]]; then

    # We skip this event if updates are disabled for the current profile.
    if [[ " ${DISABLED_UPDATES[@]} " =~ " $service " ]]; then
        return 0
    fi

    if wget -q -T 3 -t 1 --spider google.com; then

        # Cleanup remaining container if the user hits CTRL+C during the update.
        trap 'docker rm cpw_update' SIGINT
        
        # This gets the current image CMD to reset it later when committing.
        current_cmd=$(docker inspect -f '{{.Config.Cmd}}' "$service" | \
            sed 's/[][]//g' | cut -d " " -f 3-)
        
        # This is an example of how you could run a command in parallel to
        # the update process. Note that this will be interrupted if it does
        # not terminate before the main update, so only use this if you can
        # afford the risk. This line is optional.
        sleep 1 && docker exec -d cpw_update bash -c "pkgfile -u" &
        
        # This is the update command. The image CMD is changed to allow
        # update interruptions by hitting CTRL+C. Note that if you hit CTRL+C
        # here, only the trap command above will be executed, not the rest.
        docker run -ti --name cpw_update "$service" \
            bash -c "pacman -Syu --noconfirm"
        
        # This commits the updated container and resets the image CMD.
        docker stop cpw_update
        docker commit -c "CMD $current_cmd" cpw_update "$service"
        docker rm cpw_update
    else
        echo "You do not seem to have Internet access, skipping update"
    fi

######################################!!!!######################################
# Image build code
######################################!!!!######################################
elif [[ "$event" = "build" ]]; then

    # We skip this event if rebuilds are disabled and an image already exists
    if [[ " ${DISABLED_REBUILDS[@]} " =~ " $service " ]]; then
        if [[ -n $(docker images -qf reference="$service") ]]; then
            return 0
        fi
    fi

    if wget -q -T 3 -t 1 --spider google.com; then

        # This is the command used every time an image needs to be (re)built.
        if ! docker-compose "${COMPOSE_OPTS[@]}" build "${BUILD_ARGS[@]}" \
                            "$service"; then
            echo "Build failed, check your Dockerfile (cpw edit $service)"
            exit 1
        fi
    else
        echo "You do not seem to have Internet access, skipping build"
    fi

######################################!!!!######################################
# Runs before every cpw run 
######################################!!!!######################################
elif [[ "$event" = "prerun" ]]; then

    # Commands to run before the 'mob' service starts.
    if [[ "$service" = "mob" ]]; then

        # This section allows the creation of an AP to test mobile apps
        # It requires the create_ap script (available on Arch repos):
        # https://github.com/oblique/create_ap
#        ap_name=<change>
#        wifi_interface=<change>
#        eth_interface=<change>
#
#        # We store the AP password in a file to avoid having to type it every
#        # time we start the container. The password is renewed if the file has
#        # last been modified more than 5 days ago.
#        pass_file="./ap_pass_file"
#        ap_password=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 12)
#
#        if [[ -n $(find "$pass_file" -mtime +5 2>&1) ]]; then
#            if [[ ! -f "$pass_file" ]]; then
#                touch "$pass_file"
#                chmod 600 "$pass_file"
#            fi
#            echo -n $ap_password > $pass_file
#        else
#            ap_password=$(< $pass_file)
#        fi
#
#        # This will create the wifi access point.
#        echo "AP password: $ap_password"
#        trap "create_ap --stop $wifi_interface" SIGINT
#        create_ap --daemon \
#            "$wifi_interface" \
#            "$eth_interface" \
#            "$ap_name" "$ap_password" > /dev/null
#
#        if [[ $? -eq 0 ]]; then
#            # This will autoconfigure your AP on a plugged in Android phone.
#            # It requires adb on the host and this app to be installed:
#            # https://github.com/steinwurf/adb-join-wifi
#            #device=$(adb devices -l | grep 'transport_id' | \
#            #    head -n 1 | awk '{print $2}')
#
#            #case "$device" in
#            #unauthorized)
#            #    echo "Access to Android device unauthorized"
#            #    echo "You need to unlock it and allow debugging"
#            #    read -p "Once you are done, press Enter to continue"
#            #    ;&
#            #device)
#            #    app=$(adb shell pm list packages | \
#            #        grep 'steinwurf.adbjoinwifi')
#
#            #    if [[ -n "$app" ]]; then
#            #        adb shell am start \
#            #            -n com.steinwurf.adbjoinwifi/.MainActivity \
#            #            -e ssid "$ap_name" \
#            #            -e password_type WPA \
#            #            -e password "$ap_password"
#            #    else
#            #        echo "Could not find adb-join-wifi, phone not configured"
#            #        echo "You need this Android app if you want AP autoconfig"
#            #        echo "https://github.com/steinwurf/adb-join-wifi"
#            #    fi
#            #    ;;
#            #*)
#            #    echo "You don't seem to have any Android phone plugged in"
#            #    echo "Or you don't have USB debugging enabled"
#            #    echo "Skipping Android phone AP autoconfiguration"
#            #esac
#
#            #adb kill-server
#
#            # Unless you use 'cpw run mob noburp', AP traffic will be forwarded
#            # to Burp.
#            if ! [[ " ${@:4} " =~ " noburp " ]]; then
#                iptables -I INPUT 2 -p tcp \
#                    -s 192.168.12.0/24 --dport 8080 -j ACCEPT
#                iptables -t nat -A PREROUTING -p tcp \
#                    -s 192.168.12.0/24 --dport 80 -j REDIRECT --to-port 8080
#                iptables -t nat -A PREROUTING -p tcp \
#                    -s 192.168.12.0/24 --dport 443 -j REDIRECT --to-port 8080
#                echo "You can bind Burp to 192.168.12.1 in invisible mode"
#            fi
#        fi

        # This sets a custom cgroup rule for the mobile pentest service.
        sleep 1 && set_cgroup "$service" &
    fi

    # Firewall configuration example for internal network pentests
    #if [[ "$service" = "int" ]]; then

    #    # Responder ports (note: multiport has a 15 ports limit)
    #    iptables -I INPUT 2 -p tcp -m multiport --dports \
    #        21,25,53,80,88,110,139,143,389,443,445,587,1433,3128,3141 -j ACCEPT
    #    iptables -I INPUT 2 -p tcp -m multiport --dports \
    #        3389  -j ACCEPT
    #    iptables -I INPUT 2 -p udp -m multiport --dports \
    #        53,88,137,138,1434,5353 -j ACCEPT

    #    # Other ports
    #    iptables -I INPUT 2 -p tcp -m multiport --dports \
    #        4444  -j ACCEPT
    #fi

######################################!!!!######################################
# Runs after every cpw run 
######################################!!!!######################################
elif [[ "$event" = "postrun" ]]; then

    # Commands to run after the 'mob' service stops.
    #if [[ "$service" = "mob" ]]; then
    #    create_ap --stop "$wifi_interface"

    #    if ! [[ " ${@:4} " =~ " noburp " ]]; then
    #        iptables -D INPUT -p tcp \
    #            -s 192.168.12.0/24 --dport 8080 -j ACCEPT
    #        iptables -t nat -D PREROUTING -p tcp \
    #            -s 192.168.12.0/24 --dport 80 -j REDIRECT --to-port 8080
    #        iptables -t nat -D PREROUTING -p tcp \
    #            -s 192.168.12.0/24 --dport 443 -j REDIRECT --to-port 8080
    #    fi
    #fi

    # Internal network pentest cleanup example
    #if [[ "$service" = "int" ]]; then

    #    # Responder ports (note: multiport has a 15 ports limit)
    #    iptables -D INPUT -p tcp -m multiport --dports \
    #        21,25,53,80,88,110,139,143,389,443,445,587,1433,3128,3141 -j ACCEPT
    #    iptables -D INPUT -p tcp -m multiport --dports \
    #        3389  -j ACCEPT
    #    iptables -D INPUT -p udp -m multiport --dports \
    #        53,88,137,138,1434,5353 -j ACCEPT

    #    # Other ports
    #    iptables -D INPUT -p tcp -m multiport --dports \
    #        4444  -j ACCEPT
    #fi
    true

######################################!!!!######################################
# Code for the cpw start command
######################################!!!!######################################
elif [[ "$event" = "start" ]]; then
    container=$(docker ps -alqf name="cpw_$service")

    # We check if the container already exists
    if [[ -n "$container" ]]; then
        source ./script prerun "${@:2}"
        docker start "$container"
        source ./script postrun "${@:2}"
    else
        ./cpw run "${@:3}"
    fi

######################################!!!!######################################
# Code for the cpw exec command
######################################!!!!######################################
elif [[ "$event" = "exec" ]]; then
    running=$(docker ps -qf "name=cpw_$service" | head -n 1)

    # If you use 'cpw run' or 'cpw start' on a service for which a container is
    # already running, the following commands will be executed on it before
    # attempting to create a new container.
    if [[ -n "$running" ]]; then
        if [[ -n "${@:4}" ]]; then
            exec docker exec -ti "$running" "${@:4}"
        else
            echo "$service is already running, spawning a shell..."

            # Most of the time you will want to end cpw execution here by using
            # bash exec or 'exit 1' because letting the script run after an
            # 'exec' event will fall through to 'cpw run/start' code (which
            # builds/updates images and runs/starts containers) depending on the
            # cpw command used.
            exec docker exec -ti "$running" bash
        fi
    fi

######################################!!!!######################################
# Code for the cpw commit command
######################################!!!!######################################
elif [[ "$event" = "commit" ]]; then
    container=$(docker ps -alqf name="cpw_$service")

    # We make sure a container already exists
    if [[ -n "$container" ]]; then
        docker commit "$container" "$service"
    else
        echo "Did not find a container to commit"
    fi

######################################!!!!######################################
# Runs every time cpw stops a container
######################################!!!!######################################
elif [[ "$event" = "stop" ]]; then
    containers=$(docker ps -aqf name="cpw_$service")

    for container in $containers; do
        docker stop -t 2 "$container"
        source ./script postrun "${@:2}"
    done

######################################!!!!######################################
# Runs every time a cpw process ends without interruption
######################################!!!!######################################
elif [[ "$event" = "exit" ]]; then
    true

######################################!!!!######################################
# You can implement your own cpw commands here
######################################!!!!######################################
else
    ./cpw -h
fi
